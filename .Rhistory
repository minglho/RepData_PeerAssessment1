getwd()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.filles("diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
str(andy)
summary(andy)
names(andy)
?list.files
?unclass
files <- list.files()
files
files <- list.files("diet_data")
files
bad <- files == "desktop.ini"
files <- files[!bad]
files
files <- Null
NULL
files <- NULL
files
?rm
?%in%
a < - 1:10
a <- 1:10
b <- 5-15
a %in% b
b
b <- 5:15
a %in% b
list.files("diet_data")
?vector
a
as.vector(a)
as.vector("test")
?rm
rm.subset(x,y) {
# Removes the elements in vector y from the vector x.
y <- as.vector(y)
x[! x %in% y]
}
rm.subset <- function (x,y) {
# Removes the elements in vector y from the vector x.
y <- as.vector(y)
x[! x %in% y]
}
files = rm.subset(list.files("diet_data"),"desktop.ini")
files
str(gl)
?gl
x <= gl(2,2,20)
x <- gl(2,2,20)
str(x)
y <- as.vector(x)
z<-as.numeric(x)
str(library)
?library
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(v)
v
v <- makeVector(x)
v$set(1:5)
v$get()
u <- makeVector()
u
?"matrix"
matrix(1:6, 2, 3)
A = matrix(1:6, 2, 3)
solve(A)
str(u)
## Matrix inversion is usually a costly computation. These
## functions implement a special matrix that caches its inverse
## rather than computing it repeatedly.
## This function creates a special "matrix" object that can cache
## its inverse.
makeCacheMatrix <- function(x = matrix()) {
## Precondition: x is a square invertible matrix
## Postcondition: returns the special matrix
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already
## been calculated (and the matrix has not changed), then
## cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Precondition: 'x' is a speical square invertible matrix
##              created by makeCacheMatrix.
## Postcondition: Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached inverse")
} else {
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
}
inv
}
M = makeCacheMatrix()
M$set(matrix(c(1,2,3,5)))
M$get()
M$set(matrix(c(1,2,3,5),2,2))
M$get()
cacheSolve(M)
cacheSolve(M)
M$set(c(1,1,0,-1),2,2)
M$get()
M$set(c(1,1,0,-1))
M$get()
M$set(matrix(c(1,1,0,-1),2,2))
M$get()
cacheSolve(M)
cacheSolve(M)
M$set(matrix(c(1,1,0,-2),2,2))
M$get()
cacheSolve(M)
cacheSolve(M)
library(datasets)
data(iris)
?iris
iris
str(iris)
x <- subset(iris, Species = "virginica")
x
x <- subset(iris, Species == "virginica")
x
mean[x$Petal.Length]
mean(x$Petal.Length)
colMeans(iris)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
str(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
26.66364-15.10000
x <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
x
x$4 - x$8
x$'4' - x$'8'
str(x)
x$"4"
x$4
X$'4'
x$'4'
x
x[1]
x[1]-x[3]
x["4"]
abs(-5)
x<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
abs(x["4"]-x["8"])
ans <- abs(x["4"]-x["8"])
str(ans)
ans <- abs(x[["4"]]-x[["8"]])
ans
mean(iris[iris$Species=="virginica","Sepal.Length"])
x1 <- iris[iris$Species=="virginica","Sepal.Length"])
mean(x1)
x <- subset(iris, Species == "virginica")
mean(x2)
x1 <- iris[iris$Species=="virginica","Sepal.Length"]
mean(x1)
x2 <- subset(iris, Species == "virginica")
mean(x2)
mean(x2$Sepal.Length)
apply(iris[, 1:4], 2, mean)
str(mtcars)
x = tapply(mtcars$hp,mtcars$$cyl, mean)
x = tapply(mtcars$hp,mtcars$cyl, mean)
x
x[[4]]-x[[8]]
x[["4"]]-x[["8"]]
abs(x[["4"]]-x[["8"]])
install.packages("swirl")
install.packages("swirl")
library(swirl)
swril()
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye()
install.packages("ggplots2")
install.packages("ggplot2")
?par
?plot
?points
?plot
setwd("~/GitHub/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
df1 <- data.class(dayType = factor(rep("Weekday",4)))
df1 <- data.frame(dayType = factor(rep("Weekday",4)))
View(df1)
df2 <- data.frame(dayType = factor(rep("Weekend",3)))
df <- rbind(df1,df2)
?xyplot
library(lattice)
?xyplot
intervals.wd <- mutate(intervals.wd, dayType = factor("Weekday"))
intervals.we <- mutate(intervals.we, dayType = factor("Weekend"))
intervals <- rbind(intervals.wd, intervals.we)
par(mfcol = c(2,1))
xyplot(meanSteps ~ min | dayType,
data = intervals,
type = "l")
xyplot(meanSteps ~ min | dayType,
data = intervals,
type = "l",
layout = c(2,1))
?xyplot
